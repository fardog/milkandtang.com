<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: code | milkandtang]]></title>
  <link href="http://milkandtang.com/blog/categories/code/atom.xml" rel="self"/>
  <link href="http://milkandtang.com/"/>
  <updated>2013-10-07T20:38:57-07:00</updated>
  <id>http://milkandtang.com/</id>
  <author>
    <name><![CDATA[Nathan Wittstock]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[keeping your countdowns in check]]></title>
    <link href="http://milkandtang.com/blog/2013/07/12/keeping-your-countdowns-in-check/"/>
    <updated>2013-07-12T22:09:00-07:00</updated>
    <id>http://milkandtang.com/blog/2013/07/12/keeping-your-countdowns-in-check</id>
    <content type="html"><![CDATA[<p><a href="http://timer.fardogllc.com">Timer</a> is a simple, multiple countdown timer web application. The iPhone lacks multiple timers, and what I found on the app store was poor. What I found online, also poor (and way too full of ads), so I built one. It's pretty simple, and hopefully you'll find it useful.</p>

<p>I've actually started some additional work on it—such as long-running timers that are remembered if you leave the site—but I'll probably come back to those some other day. Also this includes my newest pre-deployment processing scripts, which perform automatic minification and building from <a href="http://jinja.pocoo.org/">jinja</a> templates. They may be of interest to someone.</p>

<p>Timer's source is <a href="http://github.com/fardog/timer/">available on my github</a>. I would love to see some patches or improvements! Or, just enjoy as-is.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The New Yorker and the importance of optimization]]></title>
    <link href="http://milkandtang.com/blog/2013/03/06/the-new-yorker-and-the-importance-of-optimization/"/>
    <updated>2013-03-06T22:43:00-08:00</updated>
    <id>http://milkandtang.com/blog/2013/03/06/the-new-yorker-and-the-importance-of-optimization</id>
    <content type="html"><![CDATA[<p><em>Update 2013-03-07: Please see the correction at the bottom of this article.</em></p>

<p>I have a small obsession web platforms, and discovering what platform a site is using. There are some <a href="http://guess.scritch.org/">great tools</a> that help, but nothing beats <a href="https://en.wikipedia.org/wiki/View-source_URI_scheme">viewing the source</a>. Recently I encountered the <em><a href="http://www.newyorker.com/">New Yorker</a></em>…</p>

<p>It's a sight. I encourage you to check the source for yourself, but it's a templating system gone wrong. The day I discovered it, I <a href="https://twitter.com/milkandtang/status/304454130448080897">tweeted</a>—</p>

<blockquote><p>in the midst of 90 new-lines, sits @NewYorker's <code>&lt;html&gt;</code> tag. a scant 1006 lines later, the <code>&lt;body&gt;</code>.</p></blockquote>

<p>—to no reply. It's for real though: their homepage serves, of this writing, <em>16101 newlines</em>. Many of their tags are surrounded by no less than 30 newlines each. Their <code>&lt;head&gt;</code> contains <em>998</em> alone. So this gets me thinking:</p>

<p>A newline character, usually represented as <code>\n</code> in many languages, but represented by the unicode <code>U+000A</code> tends to be represented as an 8-bit ASCII character, or one byte. For the purposes of this excercise we'll assume exactly that.</p>

<p>In terms of websites:</p>

<ul>
<li><a href="http://nytimes.com">The New York Times</a> sends 1419 newlines.</li>
<li><a href="http://apple.com">Apple</a> sends 236</li>
<li><a href="http://google.com">Google</a> sends 87</li>
<li><a href="http://reddit.com">Reddit</a> sends 1 newline. One.</li>
</ul>


<p>Now lets talk bandwidth: 16101 bytes is 0.0153 MB—less than two-hundredths of a megabyte—it's not much. Now traffic-wise: According to <a href="http://compete.com">Compete</a>, they see 1,103,088 unique visitors per month.</p>

<p>Or, if you prefer: <strong>16.54 GB of newlines per month</strong>, strictly in unique visits to the homepage. Hey, <a href="http://condenast.com">Condé Nast</a>: might be time to optimize?</p>

<p><strong>Correction:</strong> Reddit has <a href="http://www.reddit.com/r/webdev/comments/19u4ho/the_new_yorker_and_its_16gb_of_newlines/">bested me on this one</a>. As the commenters point out, my math is done assuming that the web server isn't configured to compress with <a href="http://en.wikipedia.org/wiki/Gzip">gzip</a>—and it is. Since <a href="http://www.http-compression.com/">all major browsers support gzip</a>, the actual impact of <em>The New Yorker's</em> excessive newlines is <a href="http://www.reddit.com/r/webdev/comments/19u4ho/the_new_yorker_and_its_16gb_of_newlines/c8rc6ie">minimal</a>.</p>

<p>So, this is more or less an article about the comical result of a templating system than it is about performance. Thanks to those on Reddit that pointed out this error.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making noise in Python]]></title>
    <link href="http://milkandtang.com/blog/2013/02/16/making-noise-in-python/"/>
    <updated>2013-02-16T14:44:00-08:00</updated>
    <id>http://milkandtang.com/blog/2013/02/16/making-noise-in-python</id>
    <content type="html"><![CDATA[<p>I've been working with <a href="https://github.com/bastibe/PyAudio">PyAudio</a> lately, on a project to synchronize sound streams across multiple devices. Nothing to say on that front yet, but I do have a nice snippet for programatically generating a tone:</p>

<p>```python
import math
import numpy
import pyaudio</p>

<p>def sine(frequency, length, rate):</p>

<pre><code>length = int(length * rate)
factor = float(frequency) * (math.pi * 2) / rate
return numpy.sin(numpy.arange(length) * factor)
</code></pre>

<p>def play_tone(stream, frequency=440, length=1, rate=44100):</p>

<pre><code>chunks = []
chunks.append(sine(frequency, length, rate))

chunk = numpy.concatenate(chunks) * 0.25

stream.write(chunk.astype(numpy.float32).tostring())
</code></pre>

<p>if <strong>name</strong> == '<strong>main</strong>':</p>

<pre><code>p = pyaudio.PyAudio()
stream = p.open(format=pyaudio.paFloat32,
                channels=1, rate=44100, output=1)

play_tone(stream)

stream.close()
p.terminate()
</code></pre>

<p>```</p>

<p>This simply generates a sine wave of a specified frequency and length, and writes it out to an already open PyAudio stream. A pleasant tone is produced. It's not too fancy, but it beats loading a wave file from disk.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple 'workon' Command for fish shell]]></title>
    <link href="http://milkandtang.com/blog/2013/02/15/simple-workon-command-for-fish-shell/"/>
    <updated>2013-02-15T00:15:00-08:00</updated>
    <id>http://milkandtang.com/blog/2013/02/15/simple-workon-command-for-fish-shell</id>
    <content type="html"><![CDATA[<p>I put together a quick <code>workon</code> clone for the <a href="http://www.ridiculousfish.com/shell/">fish's fish shell</a>. Definitely nothing as complete or useful as <a href="http://www.doughellmann.com/projects/virtualenvwrapper/">virtualenvwrapper</a>, but it fixes my need: switching simply between virtualenv's and projects.</p>

<h2>Installation</h2>

<p>First, create a function file <code>~/.config/fish/functions/workon.fish</code> with this defintion:</p>

<p>```
function workon -d "Activate virtual environment in $WORKON_HOME"
  set tgt {$WORKON_HOME}/$argv[1]
  if [ -d $tgt ]</p>

<pre><code>cd $tgt

# deactivate any active venv, and activate the target
# this needs to be rewritten with the `type` fish command
if test -n "$VIRTUAL_ENV"
  deactivate
end

. bin/activate.fish

if test (count $argv) -gt 1
  if test $argv[2] = "open"
    set -gx WORKON_OPEN_SUBLIME True
  end
else
  set -ge WORKON_OPEN_SUBLIME
end

# open sublime text
if test -n "$WORKON_OPEN_SUBLIME"
  open {$WORKON_SRC_DIR}/{$argv[1]}.sublime-project
end

# change to working dir
if test -n "$WORKON_SRC_DIR"
  cd {$WORKON_SRC_DIR}/{$argv[1]}
end
</code></pre>

<p>  else</p>

<pre><code>echo "$tgt not found"
</code></pre>

<p>  end
end</p>

<p>complete -c workon -a "(cd $WORKON_HOME; ls -d *)"
```</p>

<p>Then, define the necessary environment variables in your <code>~/.config/fish/config.fish</code> file:</p>

<p><code>
set -gx WORKON_HOME ~/Documents/virtual_environments
set -gx WORKON_SRC_DIR ~/Documents/code
set -gx WORKON_OPEN_SUBLIME True
</code></p>

<p>As you might imagine, this is set up for how I work, but it wouldn't be difficult to customize for your needs. Since this uses the virtualenv-provided <code>activate.fish</code> script, the <code>deactivate</code> command works as expected, as well as any other usual functions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Is this Daylight Saving Time?]]></title>
    <link href="http://milkandtang.com/blog/2012/12/13/is-this-daylight-saving-time/"/>
    <updated>2012-12-13T00:17:00-08:00</updated>
    <id>http://milkandtang.com/blog/2012/12/13/is-this-daylight-saving-time</id>
    <content type="html"><![CDATA[<p><a href="http://isthisdst.us">Is this Daylight Saving Time?</a> is a single-page site to determine your DST status. You can check out the source on <a href="https://github.com/fardog/isthisdst/">GitHub</a>.</p>

<p>It's an overblown build—using <a href="http://djangoproject.com">Django</a> for such a small site isn't necessary—but it was more of an exercise than anything. The implementation is my first attempt at some best practices, namely <a href="http://fabfile.org">fabric</a> for automated deployment out of git, and <a href="https://github.com/cyberdelia/django-pipeline">pipeline</a> for css/script minification.</p>

<p>Other packages used include <a href="http://pypi.python.org/pypi/pytz">pytz</a> for timezone calculations and <a href="https://github.com/boto/boto">boto</a> for automated upload of static assets to <a href="http://aws.amazon.com">S3</a>. <a href="http://foundation.zurb.com">Zurb Foundation</a> was used for the frontend.</p>

<p>Geolocation is done using the City and Country IP databases from <a href="http://www.maxmind.com/en/geolocation_landing">MaxMind</a> and uses the Django-included <a href="https://docs.djangoproject.com/en/dev/ref/contrib/gis/geoip/">django.contrib.gis.geoip</a> to read them. That resolves the lat/long, which I then send to <a href="http://www.geonames.org/">GeoNames</a> for to get the timezone. That result is cached in a local SQLite database to minimize lookups to GeoNames.</p>

<p>Overall, it was a great learning experience. Like all great learning experiences it took entirely longer than I'd originally intended; all part of the fun.</p>
]]></content>
  </entry>
  
</feed>
