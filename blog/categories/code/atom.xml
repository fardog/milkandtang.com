<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: code | milkandtang]]></title>
  <link href="http://milkandtang.com/blog/categories/code/atom.xml" rel="self"/>
  <link href="http://milkandtang.com/"/>
  <updated>2014-10-23T21:51:20-07:00</updated>
  <id>http://milkandtang.com/</id>
  <author>
    <name><![CDATA[Nathan Wittstock]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mac OS X Audio in node.js, and a Chromecast]]></title>
    <link href="http://milkandtang.com/blog/2014/09/26/nodejs-mac-osx-audio-and-a-chromecast/"/>
    <updated>2014-09-26T12:05:00-07:00</updated>
    <id>http://milkandtang.com/blog/2014/09/26/nodejs-mac-osx-audio-and-a-chromecast</id>
    <content type="html"><![CDATA[<p>A few weeks ago, a simple idea formed: why can't you easily stream system audio to a Chromecast? Sure, if your chosen listening application already supports it, you're set. Otherwise you're left out.</p>

<p>A solution seemed simple: node.js has <a href="http://nodejs.org/api/stream.html">streams</a>, and they're awesome! Take system audio, pipe it to an encoder, pipe that to an HTTP response, and tell the Chromecast where to look. Easy!</p>

<p>Except, there's no node.js package that supports OS X audio input, except via <a href="https://www.npmjs.org/package/node-core-audio">bindings to another library</a>. I wanted to write something that was only dependent on the OS X core frameworks.</p>

<h2>Hello <a href="https://www.npmjs.org/package/osx-audio">osx-audio</a></h2>

<p>A few weeks later, and there's a solution (writing your first node.js native binding is hard!). <a href="https://www.npmjs.org/package/osx-audio">osx-audio</a> will allow you to get a readable stream from your currently-selected OS X audio input. It only depends on the frameworks available in Mac OS X, so if you can compile any other native node.js extension, you should be able to install it!</p>

<p>You should check it out if audio input's the thing you need. Output will be implemented in the future too!</p>

<h2>How about the Chromecast?</h2>

<p><a href="https://www.npmjs.org/package/chromecast-osx-audio">Solved</a>, but it still requires an additional piece of software. You see, OS X doesn't provide native methods for accessing system audio (the output of the system mixer) so anything that's not an input (like the microphone) is inaccessible. However, there's a open source utility called <a href="http://rogueamoeba.com/freebies/soundflower/">Soundflower</a> that solves this for you. If you're unfamiliar with it, here's a step by step to get it working:</p>

<ol>
<li>Install <a href="http://rogueamoeba.com/freebies/soundflower/">Soundflower</a>. Reboot.</li>
<li>Install <a href="https://www.npmjs.org/package/chromecast-osx-audio">chromecast-osx-audio</a> globally, with an <code>npm install -g chromecast-osx-audio</code></li>
<li>Open your <em>System Preferences -> Sound</em> preference pane, and select "Soundflower (2ch)" as both your input and output.</li>
<li>Run <code>chromecast</code> in your terminal. It will find the first-available Chromecast, and stream your system audio to it.</li>
<li>Play your music/audio as normal. There is a 5–15   second delay due to how the Chromecast buffers.</li>
<li>Enjoy</li>
</ol>


<h2>Ok, great. I don't have a Chromecast</h2>

<p>They are pretty cheap! But, I wrote a generic module that just exposes a live mp3 stream of your system audio. It's called <a href="https://www.npmjs.org/package/webcast-osx-audio">webcast-osx-audio</a>, and it's what <a href="https://www.npmjs.org/package/chromecast-osx-audio">chromecast-osx-audio</a> relies on for it's streaming component. You can install it just as above, and it exposes a <code>webcast-audio</code> command when installed globally. Connect to <em>http://your_local_ip:3000/stream.mp3</em> and you're good to go!</p>

<h2>What's next?</h2>

<ul>
<li>I still need to write the <del>input-side</del> output-side of <a href="https://www.npmjs.org/package/osx-audio">osx-audio</a> before I consider it complete. And tests!</li>
<li><a href="https://www.npmjs.org/package/chromecast-osx-audio">chromecast-osx-audio</a> will only stream to the first Chromecast it finds. I plan to implement an interface that allows you to select which you'd like to stream to if multiple are found. That'll be in before v1.0.</li>
</ul>


<p>Note that both modules command-line interfaces have usage information! Just run <code>chromecast --help</code> or <code>webcast-audio --help</code> to see what options are available!</p>

<p><em>Note: What we go through to solve problems, eh? All of this still assumes some familiarity with node.js—this is definitely not a solution for the non-technical. Maybe someday!</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XKCD Password Generation for Node.js]]></title>
    <link href="http://milkandtang.com/blog/2014/04/07/nodejs-xkcd-password-generator/"/>
    <updated>2014-04-07T17:30:00-07:00</updated>
    <id>http://milkandtang.com/blog/2014/04/07/nodejs-xkcd-password-generator</id>
    <content type="html"><![CDATA[<p>I created an <a href="http://github.com/fardog/node-xkcd-password/">XKCD-style password generator for Node.js</a> (see <a href="http://xkcd.com/936/">this comic</a> for reference). You can find it <a href="http://github.com/fardog/node-xkcd-password/">on my github</a> or do an <code>npm install -g xkcd-password</code> to get it on your path.</p>

<p>There are others available, but most don't include a CLI, or easily configurable options. Many use <a href="https://github.com/rstacruz/passwordgen.js/blob/master/lib/words.js">small word lists</a>. So I made one that uses a sufficiently large list—113,809 words provided by the <a href="http://icon.shef.ac.uk/Moby/">Moby Project</a>—and both a simple commandline utility and a module that you can use in your Node.js apps. If you don't like my wordlist, you can substitute your own easily. Everything is non-blocking, so you shouldn't find it bogging down your stuff.</p>

<p>Send <a href="http://github.com/fardog/node-xkcd-password/issues">issues</a> or pull requests!</p>

<p>```
Usage: xkcd-password [options]</p>

<p>Options:
   -n, --numWords    The number of words to generate for your password.  [4]
   -m, --minLength   Minimum lengh of words chosen for the generated password.  [5]
   -x, --maxLength   Maximum length of words chosen for the generated password.  [8]
   -f, --wordFile    The newline-delimited list of words to be used as the source.
   -s, --separator   The separator character to use between words when output to the console.  [ ]
   --version         print version and exit
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[primes, A Twitter-backed prime number generator]]></title>
    <link href="http://milkandtang.com/blog/2013/10/15/primes-twitter-account/"/>
    <updated>2013-10-15T15:44:00-07:00</updated>
    <id>http://milkandtang.com/blog/2013/10/15/primes-twitter-account</id>
    <content type="html"><![CDATA[<p><a href="https://twitter.com/_primes_"><img src="/media/2013-10-16_primes.png" alt="_primes_ Twitter avatar" /></a></p>

<p>A few weeks ago I started <a href="https://twitter.com/_primes_"><em>primes</em></a>, a Twitter-backed <a href="http://en.wikipedia.org/wiki/Prime_number">prime number</a> generator. When I say "Twitter-backed", I mean the bot that updates the account has very little idea of state: it only knows the last number it calculated because Twitter provides it. The program flow is this:</p>

<ol>
<li>Start up</li>
<li>Fetch the most recently calculated prime from the Twitter feed.</li>
<li>Calculate the next prime.</li>
<li>Post if an hour has passed since the last posting. Wait if not, then post.</li>
<li>Steps 2–4 forever.</li>
</ol>


<p>Technically steps two and four are merged after the first posting, since Twitter returns your latest tweet as a response when you post it. You can <a href="http://github.com/fardog/_primes_">view the code</a> on Github. It's written in CoffeeScript on Node.js, and uses <a href="https://github.com/laverdet/node-fibers">node-fibers</a> since I orginally built the prime number algorithm as a <a href="http://en.wikipedia.org/wiki/Generator_(computer_programming)">generator</a>, but it's unnecessary in this case.</p>

<p>The only state the application maintains is an internal "last posting" date, just as a fail-safe if the server it runs on spontaneously changed time: I didn't want it accidentally posting too quickly.</p>

<p>You should give it a follow if you love primes! Or maybe <a href="http://github.com/fardog/_primes_">fork the code</a> and make some new Twitter bots? I'd love to see some.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[keeping your countdowns in check]]></title>
    <link href="http://milkandtang.com/blog/2013/07/12/keeping-your-countdowns-in-check/"/>
    <updated>2013-07-12T22:09:00-07:00</updated>
    <id>http://milkandtang.com/blog/2013/07/12/keeping-your-countdowns-in-check</id>
    <content type="html"><![CDATA[<p><a href="http://timer.fardogllc.com">Timer</a> is a simple, multiple countdown timer web application. The iPhone lacks multiple timers, and what I found on the app store was poor. What I found online, also poor (and way too full of ads), so I built one. It's pretty simple, and hopefully you'll find it useful.</p>

<p>I've actually started some additional work on it—such as long-running timers that are remembered if you leave the site—but I'll probably come back to those some other day. Also this includes my newest pre-deployment processing scripts, which perform automatic minification and building from <a href="http://jinja.pocoo.org/">jinja</a> templates. They may be of interest to someone.</p>

<p>Timer's source is <a href="http://github.com/fardog/timer/">available on my github</a>. I would love to see some patches or improvements! Or, just enjoy as-is.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The New Yorker and the importance of optimization]]></title>
    <link href="http://milkandtang.com/blog/2013/03/06/the-new-yorker-and-the-importance-of-optimization/"/>
    <updated>2013-03-06T22:43:00-08:00</updated>
    <id>http://milkandtang.com/blog/2013/03/06/the-new-yorker-and-the-importance-of-optimization</id>
    <content type="html"><![CDATA[<p><em>Update 2013-03-07: Please see the correction at the bottom of this article.</em></p>

<p>I have a small obsession web platforms, and discovering what platform a site is using. There are some <a href="http://guess.scritch.org/">great tools</a> that help, but nothing beats <a href="https://en.wikipedia.org/wiki/View-source_URI_scheme">viewing the source</a>. Recently I encountered the <em><a href="http://www.newyorker.com/">New Yorker</a></em>…</p>

<p>It's a sight. I encourage you to check the source for yourself, but it's a templating system gone wrong. The day I discovered it, I <a href="https://twitter.com/milkandtang/status/304454130448080897">tweeted</a>—</p>

<blockquote><p>in the midst of 90 new-lines, sits @NewYorker's <code>&lt;html&gt;</code> tag. a scant 1006 lines later, the <code>&lt;body&gt;</code>.</p></blockquote>

<p>—to no reply. It's for real though: their homepage serves, of this writing, <em>16101 newlines</em>. Many of their tags are surrounded by no less than 30 newlines each. Their <code>&lt;head&gt;</code> contains <em>998</em> alone. So this gets me thinking:</p>

<p>A newline character, usually represented as <code>\n</code> in many languages, but represented by the unicode <code>U+000A</code> tends to be represented as an 8-bit ASCII character, or one byte. For the purposes of this excercise we'll assume exactly that.</p>

<p>In terms of websites:</p>

<ul>
<li><a href="http://nytimes.com">The New York Times</a> sends 1419 newlines.</li>
<li><a href="http://apple.com">Apple</a> sends 236</li>
<li><a href="http://google.com">Google</a> sends 87</li>
<li><a href="http://reddit.com">Reddit</a> sends 1 newline. One.</li>
</ul>


<p>Now lets talk bandwidth: 16101 bytes is 0.0153 MB—less than two-hundredths of a megabyte—it's not much. Now traffic-wise: According to <a href="http://compete.com">Compete</a>, they see 1,103,088 unique visitors per month.</p>

<p>Or, if you prefer: <strong>16.54 GB of newlines per month</strong>, strictly in unique visits to the homepage. Hey, <a href="http://condenast.com">Condé Nast</a>: might be time to optimize?</p>

<p><strong>Correction:</strong> Reddit has <a href="http://www.reddit.com/r/webdev/comments/19u4ho/the_new_yorker_and_its_16gb_of_newlines/">bested me on this one</a>. As the commenters point out, my math is done assuming that the web server isn't configured to compress with <a href="http://en.wikipedia.org/wiki/Gzip">gzip</a>—and it is. Since <a href="http://www.http-compression.com/">all major browsers support gzip</a>, the actual impact of <em>The New Yorker's</em> excessive newlines is <a href="http://www.reddit.com/r/webdev/comments/19u4ho/the_new_yorker_and_its_16gb_of_newlines/c8rc6ie">minimal</a>.</p>

<p>So, this is more or less an article about the comical result of a templating system than it is about performance. Thanks to those on Reddit that pointed out this error.</p>
]]></content>
  </entry>
  
</feed>
