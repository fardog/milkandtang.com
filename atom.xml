<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[milkandtang]]></title>
  <link href="http://milkandtang.com/atom.xml" rel="self"/>
  <link href="http://milkandtang.com/"/>
  <updated>2013-03-24T23:41:04-07:00</updated>
  <id>http://milkandtang.com/</id>
  <author>
    <name><![CDATA[Nathan Wittstock]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[vim, fish shell, and vim-sensible]]></title>
    <link href="http://milkandtang.com/blog/2013/03/22/vim-fish-shell-and-sensible/"/>
    <updated>2013-03-22T00:07:00-07:00</updated>
    <id>http://milkandtang.com/blog/2013/03/22/vim-fish-shell-and-sensible</id>
    <content type="html"><![CDATA[<p>Part of this evening was spent making <code>vim</code> workable for me, the first step was getting some sane defaults. <a href="https://github.com/tpope/vim-sensible">vim-sensible</a> was recommended in several places (as was Tim Pope&#8217;s also excellent <a href="https://github.com/tpope/vim-pathogen">pathogen</a>), but immediately after installation I was getting an error:</p>

<pre><code>Error detected while processing ~/.vim/bundle/vim-sensible/plugin/sensible.vim:
line   75:
E484: Can't open file /tmp/v1NmKg8/0
Press ENTER or type command to continue
</code></pre>

<p>Frustratingly, line 75 held no obvious suggestions. After some time troubleshooting, I found it worked fine if I wasn&#8217;t using <a href="http://www.ridiculousfish.com/shell/"><code>fish</code> shell</a>.</p>

<p>I&#8217;m not positive why this is the case, but you can fix the error by adding the following line to your <code>.vimrc</code>.</p>

<pre><code>set shell=/bin/sh
</code></pre>

<p>On next launch of <code>vim</code>, all is resolved.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The New Yorker and the importance of optimization]]></title>
    <link href="http://milkandtang.com/blog/2013/03/06/the-new-yorker-and-the-importance-of-optimization/"/>
    <updated>2013-03-06T22:43:00-08:00</updated>
    <id>http://milkandtang.com/blog/2013/03/06/the-new-yorker-and-the-importance-of-optimization</id>
    <content type="html"><![CDATA[<p><em>Update 2013-03-07: Please see the correction at the bottom of this article.</em></p>

<p>I have a small obsession web platforms, and discovering what platform a site is using. There are some <a href="http://guess.scritch.org/">great tools</a> that help, but nothing beats <a href="https://en.wikipedia.org/wiki/View-source_URI_scheme">viewing the source</a>. Recently I encountered the <em><a href="http://www.newyorker.com/">New Yorker</a></em>…</p>

<p>It&#8217;s a sight. I encourage you to check the source for yourself, but it&#8217;s a templating system gone wrong. The day I discovered it, I <a href="https://twitter.com/milkandtang/status/304454130448080897">tweeted</a>—</p>

<blockquote><p>in the midst of 90 new-lines, sits @NewYorker&#8217;s <code>&lt;html&gt;</code> tag. a scant 1006 lines later, the <code>&lt;body&gt;</code>.</p></blockquote>

<p>—to no reply. It&#8217;s for real though: their homepage serves, of this writing, <em>16101 newlines</em>. Many of their tags are surrounded by no less than 30 newlines each. Their <code>&lt;head&gt;</code> contains <em>998</em> alone. So this gets me thinking:</p>

<p>A newline character, usually represented as <code>\n</code> in many languages, but represented by the unicode <code>U+000A</code> tends to be represented as an 8-bit ASCII character, or one byte. For the purposes of this excercise we&#8217;ll assume exactly that.</p>

<p>In terms of websites:</p>

<ul>
<li><a href="http://nytimes.com">The New York Times</a> sends 1419 newlines.</li>
<li><a href="http://apple.com">Apple</a> sends 236</li>
<li><a href="http://google.com">Google</a> sends 87</li>
<li><a href="http://reddit.com">Reddit</a> sends 1 newline. One.</li>
</ul>


<p>Now lets talk bandwidth: 16101 bytes is 0.0153 MB—less than two-hundredths of a megabyte—it&#8217;s not much. Now traffic-wise: According to <a href="http://compete.com">Compete</a>, they see 1,103,088 unique visitors per month.</p>

<p>Or, if you prefer: <strong>16.54 GB of newlines per month</strong>, strictly in unique visits to the homepage. Hey, <a href="http://condenast.com">Condé Nast</a>: might be time to optimize?</p>

<p><strong>Correction:</strong> Reddit has <a href="http://www.reddit.com/r/webdev/comments/19u4ho/the_new_yorker_and_its_16gb_of_newlines/">bested me on this one</a>. As the commenters point out, my math is done assuming that the web server isn&#8217;t configured to compress with <a href="http://en.wikipedia.org/wiki/Gzip">gzip</a>—and it is. Since <a href="http://www.http-compression.com/">all major browsers support gzip</a>, the actual impact of <em>The New Yorker&#8217;s</em> excessive newlines is <a href="http://www.reddit.com/r/webdev/comments/19u4ho/the_new_yorker_and_its_16gb_of_newlines/c8rc6ie">minimal</a>.</p>

<p>So, this is more or less an article about the comical result of a templating system than it is about performance. Thanks to those on Reddit that pointed out this error.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Caps-Lock as a Compose key in XFCE4]]></title>
    <link href="http://milkandtang.com/blog/2013/02/22/using-caps-lock-as-a-compose-key-in-xfce4/"/>
    <updated>2013-02-22T14:03:00-08:00</updated>
    <id>http://milkandtang.com/blog/2013/02/22/using-caps-lock-as-a-compose-key-in-xfce4</id>
    <content type="html"><![CDATA[<p>Why not take that useless key, and make it useful? The <a href="http://en.wikipedia.org/wiki/Compose_key">Compose Key</a>—formerly present on many <a href="https://www.google.com/search?q=sun+keyboard&amp;hl=en&amp;tbm=isch&amp;tbo=u">Unix keyboards</a> of old—isn&#8217;t present on most modern laptops.</p>

<p>In <a href="http://www.xfce.org/">XFCE</a>, this is a little more cumbersome than Gnome, since there isn&#8217;t a graphical interface for <code>setxkbmap</code>, but these two commands will swap the Caps lock for a compose key:</p>

<pre><code>setxkbmap -option ctrl:nocaps  # disables caps lock
setxkbmap -option compose:caps  # sets caps key to compose
</code></pre>

<p>To make this active at login, you can add two entries to your &#8220;Session and Startup&#8221; -> &#8220;Application Autostart&#8221; available under the <strong>Settings Manager</strong>. I&#8217;ve named mine &#8220;compose1&#8221; and &#8220;compose2&#8221;, each containing one of the above commands. Now enjoy all those <a href="http://en.wikipedia.org/wiki/Dash#En_dash">en-dashes</a> you&#8217;ll surely be typing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making noise in Python]]></title>
    <link href="http://milkandtang.com/blog/2013/02/16/making-noise-in-python/"/>
    <updated>2013-02-16T14:44:00-08:00</updated>
    <id>http://milkandtang.com/blog/2013/02/16/making-noise-in-python</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been working with <a href="https://github.com/bastibe/PyAudio">PyAudio</a> lately, on a project to synchronize sound streams across multiple devices. Nothing to say on that front yet, but I do have a nice snippet for programatically generating a tone:</p>

<pre><code>import math
import numpy
import pyaudio


def sine(frequency, length, rate):
    length = int(length * rate)
    factor = float(frequency) * (math.pi * 2) / rate
    return numpy.sin(numpy.arange(length) * factor)


def play_tone(stream, frequency=440, length=1, rate=44100):
    chunks = []
    chunks.append(sine(frequency, length, rate))

    chunk = numpy.concatenate(chunks) * 0.25

    stream.write(chunk.astype(numpy.float32).tostring())


if __name__ == '__main__':
    p = pyaudio.PyAudio()
    stream = p.open(format=pyaudio.paFloat32,
                    channels=1, rate=44100, output=1)

    play_tone(stream)

    stream.close()
    p.terminate()
</code></pre>

<p>This simply generates a sine wave of a specified frequency and length, and writes it out to an already open PyAudio stream. A pleasant tone is produced. It&#8217;s not too fancy, but it beats loading a wave file from disk.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple 'workon' Command for fish shell]]></title>
    <link href="http://milkandtang.com/blog/2013/02/15/simple-workon-command-for-fish-shell/"/>
    <updated>2013-02-15T00:15:00-08:00</updated>
    <id>http://milkandtang.com/blog/2013/02/15/simple-workon-command-for-fish-shell</id>
    <content type="html"><![CDATA[<p>I put together a quick <code>workon</code> clone for the <a href="http://www.ridiculousfish.com/shell/">fish&#8217;s fish shell</a>. Definitely nothing as complete or useful as <a href="http://www.doughellmann.com/projects/virtualenvwrapper/">virtualenvwrapper</a>, but it fixes my need: switching simply between virtualenv&#8217;s and projects.</p>

<h2>Installation</h2>

<p>First, create a function file <code>~/.config/fish/functions/workon.fish</code> with this defintion:</p>

<pre><code>function workon -d "Activate virtual environment in $WORKON_HOME"
  set tgt {$WORKON_HOME}/$argv[1]
  if [ -d $tgt ]
    cd $tgt

    # deactivate any active venv, and activate the target
    # this needs to be rewritten with the `type` fish command
    if test -n "$VIRTUAL_ENV"
      deactivate
    end

    . bin/activate.fish

    if test (count $argv) -gt 1
      if test $argv[2] = "open"
        set -gx WORKON_OPEN_SUBLIME True
      end
    else
      set -ge WORKON_OPEN_SUBLIME
    end

    # open sublime text
    if test -n "$WORKON_OPEN_SUBLIME"
      open {$WORKON_SRC_DIR}/{$argv[1]}.sublime-project
    end

    # change to working dir
    if test -n "$WORKON_SRC_DIR"
      cd {$WORKON_SRC_DIR}/{$argv[1]}
    end
  else
    echo "$tgt not found"
  end
end

complete -c workon -a "(cd $WORKON_HOME; ls -d *)"
</code></pre>

<p>Then, define the necessary environment variables in your <code>~/.config/fish/config.fish</code> file:</p>

<pre><code>set -gx WORKON_HOME ~/Documents/virtual_environments
set -gx WORKON_SRC_DIR ~/Documents/code
set -gx WORKON_OPEN_SUBLIME True
</code></pre>

<p>As you might imagine, this is set up for how I work, but it wouldn&#8217;t be difficult to customize for your needs. Since this uses the virtualenv-provided <code>activate.fish</code> script, the <code>deactivate</code> command works as expected, as well as any other usual functions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Is this Daylight Saving Time?]]></title>
    <link href="http://milkandtang.com/blog/2012/12/13/is-this-daylight-saving-time/"/>
    <updated>2012-12-13T00:17:00-08:00</updated>
    <id>http://milkandtang.com/blog/2012/12/13/is-this-daylight-saving-time</id>
    <content type="html"><![CDATA[<p><a href="http://isthisdst.us">Is this Daylight Saving Time?</a> is a single-page site to determine your DST status. You can check out the source on <a href="https://github.com/fardog/isthisdst/">GitHub</a>.</p>

<p>It&#8217;s an overblown build—using <a href="http://djangoproject.com">Django</a> for such a small site isn&#8217;t necessary—but it was more of an exercise than anything. The implementation is my first attempt at some best practices, namely <a href="http://fabfile.org">fabric</a> for automated deployment out of git, and <a href="https://github.com/cyberdelia/django-pipeline">pipeline</a> for css/script minification.</p>

<p>Other packages used include <a href="http://pypi.python.org/pypi/pytz">pytz</a> for timezone calculations and <a href="https://github.com/boto/boto">boto</a> for automated upload of static assets to <a href="http://aws.amazon.com">S3</a>. <a href="http://foundation.zurb.com">Zurb Foundation</a> was used for the frontend.</p>

<p>Geolocation is done using the City and Country IP databases from <a href="http://www.maxmind.com/en/geolocation_landing">MaxMind</a> and uses the Django-included <a href="https://docs.djangoproject.com/en/dev/ref/contrib/gis/geoip/">django.contrib.gis.geoip</a> to read them. That resolves the lat/long, which I then send to <a href="http://www.geonames.org/">GeoNames</a> for to get the timezone. That result is cached in a local SQLite database to minimize lookups to GeoNames.</p>

<p>Overall, it was a great learning experience. Like all great learning experiences it took entirely longer than I&#8217;d originally intended; all part of the fun.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fixing a Famicom Disk System]]></title>
    <link href="http://milkandtang.com/blog/2010/03/21/fixing-a-famicom-disk-system/"/>
    <updated>2010-03-21T00:00:00-07:00</updated>
    <id>http://milkandtang.com/blog/2010/03/21/fixing-a-famicom-disk-system</id>
    <content type="html"><![CDATA[<p><em>Copied over from my old blog when it was decommissioned. Preserving it here since it&#8217;s helped some people in the past.</em></p>

<p>This isn’t the usual fare from this blog, but this is good information that took me quite some time to find. I’m also an avid video game collector, and i recently picked up a <a href="http://en.wikipedia.org/wiki/Twin_Famicom">Sharp Twin Famicom</a> and a few <a href="http://en.wikipedia.org/wiki/Family_Computer_Disk_System">Famicom Disk System</a> games; notably Kid Icarus and the infamous <a href="http://en.wikipedia.org/wiki/Doki_Doki_Panic">Doki Doki Panic!</a>, which later became the USA/World <em>Super Mario Brothers 2</em>.</p>

<p>Anyhow, my Twin Famicom came with Super Mario Brothers 2 (known as the Lost Worlds outside of Japan) which works perfectly, but the game on the back (some sort of Tennis game) wouldn’t ever work. I didn’t think much of it, until both of my new games didn’t work either. I would receive an Err.21 or Err.22 message each time I attempted to load the games. The drive would attempt to read, come to a full stop (<strong>note:</strong> this is important!) and then attempt to read again, shortly before throwing the error message.</p>

<p>So, my Twin Famicom came with a broken belt, which is very common, and the seller shipped the system with a new belt that would have to be <a href="http://www.pinkgorillagames.com/retro_reviews/simply_ness_guide_to_famicom_d.php">installed</a>. This part went swell, but apparently there’s more to be done. There’s a lot of <a href="http://www.digitpress.com/forum/showthread.php?t=140944">random forum posts</a> out there, telling you to adjust the potentiometer on the motor to adjust the drive speed, or the <a href="http://www.famicomworld.com/forum/index.php?topic=392.0">read head</a> on the disk drive. Adjusting the pot was simple, but didn’t give me any results, and the read head is factory set (and thoroughly waxed/glued in) and seemed a little too dangerous to adjust, so I didn’t want to try.</p>

<p>I found a lot of passing mentions to aligning the spindle, but no real good information on how to do so, until I came across this <a href="http://digitpress.com/forum/showpost.php?p=364900&amp;postcount=97">forum post</a> by “Zach”:</p>

<blockquote><p>The tough part (for me, at least) comes when you have to phyiscally align the drive. The first time I replaced a belt, the drive worked (without any alignment) for most of my games, but not some others.<br/>
[&#8230;]<br/>
So what you have to do is reach in from the front of the drive, loosen the SMALL black allen head set screw that holds the grey metal block to the spindle, then rotate the big gear with the belt slot around until it clicks (you’ll see the spring-loaded piece snap into place, dropping down a steep notch). At that point, you have to rotate the big gear another quarter turn. This is the position where you want the assembly to be when you have the little, black set screw pointing straight out the front of the drive, so line up the smal, grey metal disk pickup block (which should be free to spin around the spindle since the set screw is loose) , and tighten the set screw with your little allen wrench. Try it out and see if more disks are loading (or see if you’ve messed up the drive even more!)</p></blockquote>

<p>I followed his instructions by performing the following:</p>

<ol>
<li>Remove the FDS drive from the system, and disassemble the following:

<ul>
<li>Front faceplate and drive door</li>
<li>Bottom Plate</li>
</ul>
</li>
<li>Look inside the drive from the front (where the drive door was), and spin the spindle (from the gear at the bottom of the drive) until the small allen screw faces you.</li>
<li>Loosen the screw, and keep the allen key in the screw to hold the spindle still.</li>
<li>Spin the drive pulley clockwise until you hear a small click (clockwise should be observed by looking at the bottom of the drive. The spindle (if you were looking straight down at the top, would be moving counter-clockwise).</li>
<li>Once you hear the small click, spin one quarter turn clockwise, and tighten down the spindle (allen screw).</li>
</ol>


<p>I half reassembled things to see if the trick worked, and I was getting a new behavior! Now, the drive would spin up, attempt to read, and go to a black screen! The drive would continue spinning (and wouldn’t come to a full stop mid read, very important!), and then eventually the Famicom BIOS screen would return, with Err.27. I was on the way!</p>

<p>From here, I did the following:</p>

<ol>
<li>Loosen spindle, and turn the pulley 5 degrees or so clockwise, then retighten the spindle.</li>
<li>Try a disk again.</li>
</ol>


<p>I repeated those steps until the drive began exhibiting somewhat similar behavior as before (coming to a full stop during the read operation). Then I did the same, only moving 5 degrees counter-clockwise instead; and you know what?</p>

<p><strong>IT WORKED.</strong></p>

<p>Stupid thing loaded. It turns out that the systems are aware of the spindle position, and if it isn’t correct it will cause them to read the header data incorrectly, causing the games to fail. Afterwards, I reassembled the system and all of my games have been loading flawlessly.</p>

<p>Someday in the future maybe I’ll turn this into a guide with pretty pictures and everything, but for now hopefully this’ll help someone get their FDS working.</p>

<p>For reference, here’s a list of FDS Error Codes:</p>

<blockquote><p>ERROR 01 Disk not correctly inserted. (No Disk Card)<br/>
ERROR 02 Battery error. Check power adaptor or batteries.<br/>
ERROR 03 Broken prong on disk card.<br/>
ERROR 04 Wrong gamemaker ID.<br/>
ERROR 05 Wrong game name.<br/>
ERROR 06 Wrong version name.<br/>
ERROR 07 A, B side error (eject disk, turn and insert disk again).<br/>
ERROR 08 Disk #1 wrong.<br/>
ERROR 09 Disk #2 wrong.<br/>
ERROR 10 Disk #3 wrong.<br/>
ERROR 20 screen data differs.<br/>
ERROR 21 Disk header block(<em>NINTENDO-HVC</em>) part is wrong.<br/>
ERROR 22 Disk header block reecognition #$01 isn’t read and cant be ignored.<br/>
ERROR 23 File recognition block #$02 can’t read for several reasons and cant be ignored.<br/>
ERROR 24 File header block recognition #$03 can’t read and cant be ignored.<br/>
ERROR 25 File data block recognition #$04 can’t read and cant be ignored.<br/>
ERROR 26 Can’t save properly to disk card.<br/>
ERROR 27 Block end mark seen and ends prematurely.<br/>
ERROR 28 The disk unit and the same period can’t take it.<br/>
ERROR 29 The disk unit and the same period can’t take it.<br/>
ERROR 30 Disk card too full to save.<br/>
ERROR 31 Data number of a disk card doesn’t match up.</p></blockquote>

<p>Then, a commenter named &#8220;Jon&#8221; posted the following:</p>

<blockquote><p>Thanks for posting this! When I got a “broken” FDS recently this helped direct me towards the cure.</p>

<p>I did find a much more direct &amp; accurate way to align these though. It can be done during belt replacement &amp; should eliminate the need for fine-tuning > afterward.</p>

<p>How? When the gear assembly retainer (triangular piece) is removed for belt replacement, simply point the rectangular notch in the large white gear to > the largest notch in the metal cam below it.</p>

<p>Maintain those positions during reinstall &amp; you should be good to go. No need to hunt for a hex key (1.5mm BTW) to adjust the disk catch on the spindle &amp;>  all positioning remains at original factory settings.</p></blockquote>
]]></content>
  </entry>
  
</feed>
